{"version":3,"sources":["Hoc/Display.js","Hoc/Search.js","Hoc/Loader.js","Hoc/Random.js","Hoc/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Display","wordList","className","map","item","index","word","phonetic","meanings","section","partOfSpeech","definitions","part","definition","example","Search","handleOnchange","text","handleSubmit","console","log","onSubmit","type","value","onChange","Loader","Random","pronunciation","Home","useState","setText","setWordList","randomList","setRandomList","isLoading","setIsLoading","suggestionList","setSuggestionList","useEffect","axios","get","then","response","data","catch","err","message","e","target","length","preventDefault","onClick","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.563a9a9a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {GiSpeaker} from 'react-icons/gi';\r\n\r\nfunction Display({wordList}) {\r\n    \r\n    let playSound = (url) => {\r\n        new Audio(url).play()\r\n    }\r\n    \r\n    // const audio = wordList  && wordList[0].phonetics[0].audio\r\n    \r\n    \r\n    // console.log(audio)\r\n  return (\r\n    <div className=\"word-display\">\r\n    {\r\n    wordList?.map((item,index) => (\r\n        <div key={index}>\r\n            <div className=\"top-info\">\r\n                <h2>{item.word} </h2> \r\n                <GiSpeaker className='speaker'  />\r\n            </div>\r\n            <span>{item.phonetic}</span>\r\n            <div className=\"meaning\">\r\n                <p>Meanings</p>\r\n                <div className=\"section-meanings\">\r\n                    {\r\n                        item.meanings.map((section,index) => (\r\n                            <div className=\"part-defined\" key={index}>\r\n                                <h3>{section.partOfSpeech}</h3>\r\n                                <div className=\"indepth-definitions\">\r\n                                    {\r\n                                        section.definitions.map((part,index) =>(\r\n                                            <div className=\"each-definition\" key={index}>\r\n                                                <h4>{part.definition}</h4>\r\n                                                {part.example && <p>Example: {part.example}</p>}\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    }\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Display","import React from 'react';\r\n\r\nfunction Search({handleOnchange, text, handleSubmit}) {\r\n    console.log(text)\r\n  return (\r\n    <div>\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={text} onChange={handleOnchange}/>\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search","import React from 'react';\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n  )\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\n\r\nfunction Random({word,pronunciation,definition}) {\r\n  return (\r\n    <div className='random-page'>\r\n        <div className=\"top\">\r\n            <h2>{word}</h2>\r\n            <span>{`/${pronunciation}/`}</span>\r\n        </div>\r\n        <div className=\"definition\">\r\n            <h3>Definition</h3>\r\n            <p>{definition}</p>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Random","import React,{useState,useEffect} from 'react';\r\nimport Display from './Display';\r\nimport Search from './Search';\r\nimport axios from 'axios';\r\nimport Loader from './Loader';\r\nimport Random from './Random';\r\n\r\n\r\nfunction Home() {\r\n\r\n    const[text, setText] = useState('')\r\n    const[wordList, setWordList] = useState([])\r\n    const[randomList, setRandomList] = useState([])\r\n    const[isLoading, setIsLoading] = useState(true)\r\n    const[suggestionList, setSuggestionList] = useState([])\r\n\r\n    useEffect(()=>{\r\n        //fetch data from API\r\n        axios.get(`https://random-words-api.vercel.app/word`)\r\n        .then(response => {\r\n            setIsLoading(false);\r\n            console.log(response.data);\r\n            setRandomList(response.data);\r\n        })\r\n        .catch(err => console.log(err.message));\r\n    },[])\r\n\r\n    const handleOnchange =(e)=>{\r\n        setText(e.target.value);\r\n\r\n        //if empty set suggestion list to empty\r\n        if(!text || text === '' ){\r\n            setSuggestionList([])\r\n            return\r\n        }\r\n        else if(text.length > 0 || text){\r\n            axios.get(`https://api.datamuse.com/sug?s=${text}`)\r\n            .then(response => {\r\n                setSuggestionList(response.data);\r\n            })\r\n            .catch(err => console.log(err.message));\r\n        } \r\n        console.log(suggestionList)\r\n          \r\n    }\r\n \r\n    console.log(suggestionList)\r\n\r\n    //get the value of each clicked suggested item\r\n    const getItem =(word)=>{\r\n        setText(word);\r\n        setSuggestionList([]);\r\n        console.log(text);\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        //prevent reloading\r\n        e.preventDefault()\r\n\r\n        //check if any text exists\r\n        \r\n        setWordList([])\r\n        if(!text) return\r\n        if(text){\r\n            setWordList([]);\r\n            setSuggestionList([]);\r\n        } \r\n        axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${text}`)\r\n        .then(response => {\r\n            setWordList(response.data);\r\n        })\r\n        .catch(err => console.log(err.message))\r\n        setText('');\r\n        console.log(text);\r\n        console.log(wordList)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <h2 className='title'>my dictionary app</h2>\r\n            <Search handleOnchange={handleOnchange} text={text} handleSubmit={handleSubmit}/>\r\n            <div className='suggestion'>\r\n                <ul>\r\n                    {\r\n                        suggestionList?.map((item,index) => (\r\n                            <li key={index} onClick = {(e)=>getItem(item.word)}>{item.word}</li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n            {isLoading && <Loader />}\r\n            {wordList.length <= 0 && randomList?.map((item,index) =>(\r\n                <Random key={index} {...item}/>\r\n            ))}\r\n            <Display wordList ={wordList} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","\nimport './App.scss';\nimport React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Home from '../src/Hoc/Home';\n\n\nfunction App(){\n\n  return(\n    <BrowserRouter>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path={'/'} component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}